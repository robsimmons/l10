// Commands

inst: type.
binop:  t -> t -> t -> t -> inst.
move:   t -> t -> inst.
loadc:  t -> t -> inst.
goto:   nat -> inst.
if:     t -> t -> t -> nat -> inst.
return: t -> inst.

wCode: world.
line: nat -> inst -> rel @ wCode.

// Extracting relevant information 

succ: nat -> nat -> rel @ wCode.
def:  nat -> t -> rel @ wCode.
use:  nat -> t -> rel @ wCode.

line L (binop X Y Op Z) -> 
   succ L (L+1),
   def L X,
   use L Y, use L Z.

line L (move X Y) -> 
   succ L (L+1),
   def L X,
   use L Y.

line L (loadc X C) ->
   succ L (L+1),
   def L X.

line L (goto L') ->
   succ L L'.

line L (if X Cmp C1 L') ->
   succ L L', succ L (L+1),
   use L X.

line L (return X) ->
   use L X.
