/* L10 Lexer */

name L10Lex
alphabet 128

set id = (| (range 'A 'Z 'a 'z '0 '9) '_ '\ '')
set char = (| (range 'A 'Z 'a 'z '0 '9) 32 '' '! '@ '# '$ '% '^ '& '* '( '))
set white = (| 32 9 13 10) 
set pos = (range '1 '9)
set digit = (range '0 '9)
set az = (range 'a 'z)
set AZ = (range 'A 'Z)

regexp lcid = (seq az (* id))
regexp ucid = (seq AZ (* id))
regexp string = (seq '" (* char) '")
regexp decnum = (| '0 (seq pos (* digit)))

function lexmain : tok = 
   eos       => eof
   (+ white) => space

   '{        => lcurly
   '}        => rcurly
   '(        => lparen
   ')        => rparen
   "Ex"      => ex

   '.        => period
   ',        => comma
   ':        => colon
   '=        => eq
   "->"      => rarrow
   "<-"      => larrow
   '@        => at
   
   "=="      => eqeq
   "!="      => neq
   '>        => gt
   '<        => lt
   ">="      => geq
   "<="      => leq
   '+        => plus
   
   "world"   => world
   "type"    => ty
   "rel"     => rel
   '_        => uscore
   
   ucid      => ucid
   lcid      => lcid
   decnum    => num
   string    => str
   
   "--"      => linecomment
   "//"      => linecomment
   "{-"      => comment
   "{-#"     => anno_start
   epsilon   => error

function anno : tok = 
   (+ white) => anno_space

   "QUERY"   => anno_query

   '(        => anno_lparen
   ')        => anno_rparen

   '+        => anno_plus
   '-        => anno_minus
   '_        => anno_uscore
   lcid      => anno_lcid

   "#-}"     => anno_end
   "--"      => anno_linecomment
   "{-"      => anno_comment
   epsilon   => anno_error

function linecomment : u = 
   (| 10 13) => linecomment_close
   any       => linecomment_skip
   epsilon   => linecomment_error
   
function comment : u = 
   "{-"      => comment_open
   "-}"      => comment_close
   any       => comment_skip
   epsilon   => comment_error

