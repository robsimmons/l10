//test

{- 
  Demonstrates something simple that you can do with dynamic scheduling but
  that, with static scheduling, you must do in a different way.
-}

n: type.
z: n.
s: n -> n.

eo: type.
e: eo.
o: eo.

// Given database
wfact: world.
fact: n -> rel @ wfact.

// Even-odd computaiton
wn: n -> world.
class: {N: n} eo -> rel @ wn N.

class z e.
class N e -> class (s N) o.
class N o -> class (s N) e.

// Even-odd database
wdb: world.
even: n -> rel @ wdb.
odd: n -> rel @ wdb.

fact N, class N e -> even N.
fact N, class N o -> odd N.

// Conclusions
wconc: world.
empty: rel @ wconc.
both: rel @ wconc. 
justodd: rel @ wconc.
justeven: rel @ wconc.

not (odd _), not (even _) -> empty.
odd _, not (even _) -> justodd.
not (odd _), even _ -> justeven.
odd _, even _ -> both.

someevens = (fact z, fact (s (s (s (s z)))), fact (s (s (s (s (s (s z))))))).
someodds = (fact (s (s (s z))), fact (s (s (s (s (s (s (s z)))))))).
someofboth = (fact (s (s (s (s z)))), fact (s (s (s (s (s (s (s z)))))))).

{-# QUERY facts fact - #-}
{-# QUERY evens even - #-}
{-# QUERY odds odd - #-}
